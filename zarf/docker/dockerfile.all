# Build the Go Binary.
FROM golang:1.17 as build_algosearch
ENV CGO_ENABLED 0
ARG BUILD_REF

# Create the service directory and the copy the module files first and then
# download the dependencies. If this doesn't change, we won't need to do this
# again in future builds.
RUN mkdir /service
COPY go.* /service/
WORKDIR /service
RUN go mod download

# Copy the source code into the container.
COPY ./backend /service/backend
COPY ./zarf /service/zarf
COPY ./swagger /service/swagger

# Build the admin tool so we can have it in the container. This should not change
# often so do this first.
WORKDIR /service/backend/app/algo-admin
RUN go build -ldflags "-X main.build=${BUILD_REF}"

# Build the service binary.
WORKDIR /service/backend/app/algosearch
RUN go build -ldflags "-X main.build=${BUILD_REF}"

WORKDIR /service/backend/app/sidecar/metrics
RUN go build -ldflags "-X main.build=${BUILD_REF}"

# Frontend
# Install dependencies only when needed
FROM node:alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY frontend/package.json frontend/yarn.lock ./
RUN yarn install --frozen-lockfile

# Rebuild the source code only when needed
FROM node:alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY ./frontend .
RUN NEXT_PUBLIC_API_URL=APP_NEXT_PUBLIC_API_URL yarn build

# Production image, copy all the files and run next
FROM node:alpine AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

RUN apk --no-cache add curl

# You only need to copy next.config.js if you are NOT using the default configuration
# COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
# COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
# COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/entrypoint.sh ./entrypoint.sh

USER root

EXPOSE 3000
EXPOSE 3001
EXPOSE 3002
EXPOSE 4000
EXPOSE 5000

ENV PORT 3000

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN apk add --no-cache tzdata

ARG BUILD_DATE
ARG BUILD_REF
COPY --from=build_algosearch /service/backend/app/algo-admin/algo-admin /app/admin
COPY --from=build_algosearch /service/backend/app/algosearch/algosearch /app/algosearch
COPY --from=build_algosearch /service/zarf/keys/. /app/zarf/keys/.
COPY --from=build_algosearch /service/swagger /app/swagger
COPY --from=build_algosearch /service/zarf/start-all.sh /app/start-all.sh
COPY --from=build_algosearch /service/backend/app/sidecar/metrics/metrics /app/metrics

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

RUN chmod +x ./start-all.sh
RUN chmod +x ./entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]

CMD ["./start-all.sh"]

LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.title="algosearch" \
      org.opencontainers.image.authors="Kevin Lai <kev@borecast.com>" \
      org.opencontainers.image.source="https://github.com/kevguy/algosearch/app/algosearch" \
      org.opencontainers.image.revision="${BUILD_REF}" \
      org.opencontainers.image.vendor="Borecast"
